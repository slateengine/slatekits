// ======================================================================
// Slate Framework <hello@slateengine.com>
// ======================================================================
//
// ======================================================================
// Typekit Helpers
// ======================================================================

$modular-scale-alpha: type-setting($base-font-size, $type-ratio, $modular-step-alpha);
$modular-scale-beta: type-setting($base-font-size, $type-ratio, $modular-step-beta);
$modular-scale-gamma: type-setting($base-font-size, $type-ratio, $modular-step-gamma);
$modular-scale-delta: type-setting($base-font-size, $type-ratio, $modular-step-delta);
$modular-scale-epsilon: type-setting($base-font-size, $type-ratio, $modular-step-epsilon);
$modular-scale-zeta: type-setting($base-font-size, $type-ratio, $modular-step-zeta);
$modular-scale-eta: type-setting($base-font-size, $type-ratio, $modular-step-eta);
$modular-scale-theta: type-setting($base-font-size, $type-ratio, $modular-step-theta);
$modular-scale-iota: type-setting($base-font-size, $type-ratio, $modular-step-iota);

$lineheight-alpha: $modular-scale-alpha * $line-height;
$lineheight-beta: $modular-scale-beta * $line-height;
$lineheight-gamma: $modular-scale-gamma * $line-height;
$lineheight-delta: $modular-scale-delta * $line-height;
$lineheight-epsilon: $modular-scale-epsilon * $line-height;
$lineheight-zeta: $modular-scale-zeta * $line-height;
$lineheight-eta: $modular-scale-eta * $line-height;
$lineheight-theta: $modular-scale-theta * $line-height;
$lineheight-iota: $modular-scale-iota * $line-height;

// Map of modular font scales
// @group Typography
$type-scale: ( alpha: $modular-scale-alpha, beta: $modular-scale-beta, gamma: $modular-scale-gamma, delta: $modular-scale-delta, epsilon: $modular-scale-epsilon, zeta: $modular-scale-zeta, eta: $modular-scale-eta, theta: $modular-scale-theta, iota: $modular-scale-iota );

// Map of line heights
// @group Typography
$line-heights: ( alpha: $lineheight-alpha, beta: $lineheight-beta, gamma: $lineheight-gamma, delta: $lineheight-delta, epsilon: $lineheight-epsilon, zeta: $lineheight-zeta, eta: $lineheight-eta, theta: $lineheight-theta, iota: $lineheight-iota );

/// Modular type mixin lets you easily generate a font size on an element with lineheights and margins based on a modular scale.
/// @example scss - Modular Type
///     p {
///       @include type-modular(gamma, 24px, 24px, 24px, true )
///     }
/// @param {string} $type-scale - Desired modular scale
/// @param {string} $type-scale-vtspace - Desired margin above element (optional)
/// @param {string} $type-scale-vbspace - Desired margin below element (optional)
/// @param {string} $tflh - Overide line-height. Use pixel values, they will be converted. (optional)
/// @param {string} $tfuline - Generate unitless lineheights. (optional)
/// @group Typography

@mixin type-modular($type-scale, $type-scale-vtspace: $base-font-size * $line-height, $type-scale-vbspace: $base-font-size * $line-height, $mlh: line-height($type-scale), $muline: $unitless-lineheight) {
  @include rem(font-size, type-scale($type-scale));
  @if $muline == true {
    @include unitless-line-height(type-scale($type-scale), $mlh);
  } @else {
    @include rem(line-height, $mlh);
  }
  @include rem(margin-top, $type-scale-vtspace);
  @include rem(margin-bottom, $type-scale-vbspace);
}

/// Free type mixin lets you easily generate a font size on an element with lineheights and margins based on a pixel value.
/// @example scss - Free Type
///     p {
///       @include type-free(16px, 24px, 24px, 24px, true)
///     }
/// @param {string} $type-size - Desired font size in pixels
/// @param {string} $type-scale-vtspace - Desired margin above element (optional)
/// @param {string} $type-scale-vbspace - Desired margin below element (optional)
/// @param {string} $tflh - Overide line-height. Use pixel values, they will be converted. (optional)
/// @param {string} $tfuline - Generate unitless lineheights. (optional)
/// @group Typography

@mixin type-free($type-size, $type-scale-vtspace, $type-scale-vbspace, $tflh: $line-height, $tfuline: $unitless-lineheight) {
  @include rem(font-size, $type-size);
  @if $tfuline == true {
    @include unitless-line-height($type-size, $tflh);
  } @else {
    @include rem(line-height, $tflh);
  }
  @include rem(margin-top, $type-scale-vtspace);
  @include rem(margin-bottom, $type-scale-vbspace);
}

/// Font face mixin lets you very easily add custom fonts in multiple formats.
/// @example scss - Fontface
///     @include fontface("IM FELL English", "IMFeENrm28P", $extrabold, normal, $formats: eot woff woff2 ttf svg);
///
///     .custom-font {
///       font-family: "IM FELL English";
///     }
/// @param {string} $font-family - The fonts name eg "IM FELL English"
/// @param {string} $font-name - The fonts filename without the extension "IMFeENrm28P"
/// @param {string} $weight [normal] - Font weight
/// @param {string} $style [normal] - Font style
/// @param {string} $formats - List of font file types to use
/// @group Typography

@mixin fontface($font-family, $font-name, $weight: normal, $style: normal, $formats: eot woff ttf svg) {
  @if index('italic' 'oblique', $weight) {
    $style: $weight;
    $weight: normal;
  }
  @font-face {
    font-family: $font-family;
    font-weight: $weight;
    font-style: $style;
    font-display: swap;
    @if index($formats, eot) {
      src: url('#{$custom-font-path}#{$font-name}.eot');
    }
    src: fontsrc($formats, $font-name, $font-family);
  }
}



/// REM Baseline
/// @example scss - Free Type
///     .yourelement {
///       @include rem-baseline;
///     }
/// @param {number} $zoom - zoom amount
/// @group Type Kit
@mixin rem-baseline($zoom: 100%) {
  font-size: ($zoom / 16px) * $base-font-size;
}

// unitless line height mixin
@mixin unitless-line-height($font-size, $line-height: $line-height) {
  line-height: unitless-line-height($font-size, $line-height);
}

/// Draw Baselines to help with setting typography.
/// @example scss - lines
///     .yourelement {
///       @include lines($base-font-size, $line-height);
///     }
/// @param {number} $line-font-size - Overide the font size used to calculate the lines
/// @param {number} $line-line-height - Overide the lineheight used to calculate the lines
/// @group Type Kit
@mixin baseline($line-font-size: $base-font-size, $line-line-height: $line-height) {
  $bsize: ($line-font-size * $line-line-height);
  @if($type-debug == true) {
    background-size: rem($bsize $bsize);
    background-image: linear-gradient(to bottom, hsla(200, 100%, 50%, .3) 1px, transparent 1px);
    background-position: left -1px;
    background-repeat: repeat;
  }
}

/// Font Smoothing
/// @example scss - Font Smoothing
///     .yourelement {
///       @include font-smoothing(on);
///     }
/// @param {number} $zoom - zoom amount
/// @group Type Kit
@mixin font-smoothing($value: on) {
  @if $value == on {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  } @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
}
